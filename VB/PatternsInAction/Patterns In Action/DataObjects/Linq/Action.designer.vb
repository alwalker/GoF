'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="Action")>  _
Partial Public Class ActionDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertCategoryEntity(instance As CategoryEntity)
    End Sub
  Partial Private Sub UpdateCategoryEntity(instance As CategoryEntity)
    End Sub
  Partial Private Sub DeleteCategoryEntity(instance As CategoryEntity)
    End Sub
  Partial Private Sub InsertCustomerEntity(instance As CustomerEntity)
    End Sub
  Partial Private Sub UpdateCustomerEntity(instance As CustomerEntity)
    End Sub
  Partial Private Sub DeleteCustomerEntity(instance As CustomerEntity)
    End Sub
  Partial Private Sub InsertOrderEntity(instance As OrderEntity)
    End Sub
  Partial Private Sub UpdateOrderEntity(instance As OrderEntity)
    End Sub
  Partial Private Sub DeleteOrderEntity(instance As OrderEntity)
    End Sub
  Partial Private Sub InsertProductEntity(instance As ProductEntity)
    End Sub
  Partial Private Sub UpdateProductEntity(instance As ProductEntity)
    End Sub
  Partial Private Sub DeleteProductEntity(instance As ProductEntity)
    End Sub
  Partial Private Sub InsertOrderDetailEntity(instance As OrderDetailEntity)
    End Sub
  Partial Private Sub UpdateOrderDetailEntity(instance As OrderDetailEntity)
    End Sub
  Partial Private Sub DeleteOrderDetailEntity(instance As OrderDetailEntity)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Settings.Default.ActionConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property CategoryEntities() As System.Data.Linq.Table(Of CategoryEntity)
		Get
			Return Me.GetTable(Of CategoryEntity)
		End Get
	End Property
	
	Public ReadOnly Property CustomerEntities() As System.Data.Linq.Table(Of CustomerEntity)
		Get
			Return Me.GetTable(Of CustomerEntity)
		End Get
	End Property
	
	Public ReadOnly Property OrderEntities() As System.Data.Linq.Table(Of OrderEntity)
		Get
			Return Me.GetTable(Of OrderEntity)
		End Get
	End Property
	
	Public ReadOnly Property ProductEntities() As System.Data.Linq.Table(Of ProductEntity)
		Get
			Return Me.GetTable(Of ProductEntity)
		End Get
	End Property
	
	Public ReadOnly Property OrderDetailEntities() As System.Data.Linq.Table(Of OrderDetailEntity)
		Get
			Return Me.GetTable(Of OrderDetailEntity)
		End Get
	End Property
End Class

<Table(Name:="dbo.Category")>  _
Partial Public Class CategoryEntity
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CategoryId As Integer
	
	Private _CategoryName As String
	
	Private _Description As String
	
	Private _Version As System.Data.Linq.Binary
	
	Private _ProductEntities As EntitySet(Of ProductEntity)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCategoryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCategoryIdChanged()
    End Sub
    Partial Private Sub OnCategoryNameChanging(value As String)
    End Sub
    Partial Private Sub OnCategoryNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnVersionChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnVersionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ProductEntities = New EntitySet(Of ProductEntity)(AddressOf Me.attach_ProductEntities, AddressOf Me.detach_ProductEntities)
		OnCreated
	End Sub
	
	<Column(Storage:="_CategoryId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CategoryId() As Integer
		Get
			Return Me._CategoryId
		End Get
		Set
			If ((Me._CategoryId = value)  _
						= false) Then
				Me.OnCategoryIdChanging(value)
				Me.SendPropertyChanging
				Me._CategoryId = value
				Me.SendPropertyChanged("CategoryId")
				Me.OnCategoryIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CategoryName", DbType:="VarChar(15) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CategoryName() As String
		Get
			Return Me._CategoryName
		End Get
		Set
			If (String.Equals(Me._CategoryName, value) = false) Then
				Me.OnCategoryNameChanging(value)
				Me.SendPropertyChanging
				Me._CategoryName = value
				Me.SendPropertyChanged("CategoryName")
				Me.OnCategoryNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="VarChar(100) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Version", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=false, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Version() As System.Data.Linq.Binary
		Get
			Return Me._Version
		End Get
		Set
			If (Object.Equals(Me._Version, value) = false) Then
				Me.OnVersionChanging(value)
				Me.SendPropertyChanging
				Me._Version = value
				Me.SendPropertyChanged("Version")
				Me.OnVersionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="CategoryEntity_ProductEntity", Storage:="_ProductEntities", ThisKey:="CategoryId", OtherKey:="CategoryId")>  _
	Public Property ProductEntities() As EntitySet(Of ProductEntity)
		Get
			Return Me._ProductEntities
		End Get
		Set
			Me._ProductEntities.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ProductEntities(ByVal entity As ProductEntity)
		Me.SendPropertyChanging
		entity.CategoryEntity = Me
	End Sub
	
	Private Sub detach_ProductEntities(ByVal entity As ProductEntity)
		Me.SendPropertyChanging
		entity.CategoryEntity = Nothing
	End Sub
End Class

<Table(Name:="dbo.Customer")>  _
Partial Public Class CustomerEntity
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CustomerId As Integer
	
	Private _CompanyName As String
	
	Private _City As String
	
	Private _Country As String
	
	Private _Version As System.Data.Linq.Binary
	
	Private _OrderEntities As EntitySet(Of OrderEntity)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCustomerIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCustomerIdChanged()
    End Sub
    Partial Private Sub OnCompanyNameChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyNameChanged()
    End Sub
    Partial Private Sub OnCityChanging(value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnCountryChanging(value As String)
    End Sub
    Partial Private Sub OnCountryChanged()
    End Sub
    Partial Private Sub OnVersionChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnVersionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OrderEntities = New EntitySet(Of OrderEntity)(AddressOf Me.attach_OrderEntities, AddressOf Me.detach_OrderEntities)
		OnCreated
	End Sub
	
	<Column(Storage:="_CustomerId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CustomerId() As Integer
		Get
			Return Me._CustomerId
		End Get
		Set
			If ((Me._CustomerId = value)  _
						= false) Then
				Me.OnCustomerIdChanging(value)
				Me.SendPropertyChanging
				Me._CustomerId = value
				Me.SendPropertyChanged("CustomerId")
				Me.OnCustomerIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CompanyName", DbType:="VarChar(40) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CompanyName() As String
		Get
			Return Me._CompanyName
		End Get
		Set
			If (String.Equals(Me._CompanyName, value) = false) Then
				Me.OnCompanyNameChanging(value)
				Me.SendPropertyChanging
				Me._CompanyName = value
				Me.SendPropertyChanged("CompanyName")
				Me.OnCompanyNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_City", DbType:="VarChar(15) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me.OnCityChanging(value)
				Me.SendPropertyChanging
				Me._City = value
				Me.SendPropertyChanged("City")
				Me.OnCityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Country", DbType:="VarChar(15) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Country() As String
		Get
			Return Me._Country
		End Get
		Set
			If (String.Equals(Me._Country, value) = false) Then
				Me.OnCountryChanging(value)
				Me.SendPropertyChanging
				Me._Country = value
				Me.SendPropertyChanged("Country")
				Me.OnCountryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Version", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=false, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Version() As System.Data.Linq.Binary
		Get
			Return Me._Version
		End Get
		Set
			If (Object.Equals(Me._Version, value) = false) Then
				Me.OnVersionChanging(value)
				Me.SendPropertyChanging
				Me._Version = value
				Me.SendPropertyChanged("Version")
				Me.OnVersionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="CustomerEntity_OrderEntity", Storage:="_OrderEntities", ThisKey:="CustomerId", OtherKey:="CustomerId")>  _
	Public Property OrderEntities() As EntitySet(Of OrderEntity)
		Get
			Return Me._OrderEntities
		End Get
		Set
			Me._OrderEntities.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_OrderEntities(ByVal entity As OrderEntity)
		Me.SendPropertyChanging
		entity.CustomerEntity = Me
	End Sub
	
	Private Sub detach_OrderEntities(ByVal entity As OrderEntity)
		Me.SendPropertyChanging
		entity.CustomerEntity = Nothing
	End Sub
End Class

<Table(Name:="dbo.[Order]")>  _
Partial Public Class OrderEntity
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _OrderId As Integer
	
	Private _CustomerId As Integer
	
	Private _OrderDate As Date
	
	Private _RequiredDate As System.Nullable(Of Date)
	
	Private _ShippedDate As System.Nullable(Of Date)
	
	Private _Freight As System.Nullable(Of Decimal)
	
	Private _Version As System.Data.Linq.Binary
	
	Private _OrderDetailEntities As EntitySet(Of OrderDetailEntity)
	
	Private _CustomerEntity As EntityRef(Of CustomerEntity)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOrderIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderIdChanged()
    End Sub
    Partial Private Sub OnCustomerIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCustomerIdChanged()
    End Sub
    Partial Private Sub OnOrderDateChanging(value As Date)
    End Sub
    Partial Private Sub OnOrderDateChanged()
    End Sub
    Partial Private Sub OnRequiredDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnRequiredDateChanged()
    End Sub
    Partial Private Sub OnShippedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnShippedDateChanged()
    End Sub
    Partial Private Sub OnFreightChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnFreightChanged()
    End Sub
    Partial Private Sub OnVersionChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnVersionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OrderDetailEntities = New EntitySet(Of OrderDetailEntity)(AddressOf Me.attach_OrderDetailEntities, AddressOf Me.detach_OrderDetailEntities)
		Me._CustomerEntity = CType(Nothing, EntityRef(Of CustomerEntity))
		OnCreated
	End Sub
	
	<Column(Storage:="_OrderId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property OrderId() As Integer
		Get
			Return Me._OrderId
		End Get
		Set
			If ((Me._OrderId = value)  _
						= false) Then
				Me.OnOrderIdChanging(value)
				Me.SendPropertyChanging
				Me._OrderId = value
				Me.SendPropertyChanged("OrderId")
				Me.OnOrderIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CustomerId", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CustomerId() As Integer
		Get
			Return Me._CustomerId
		End Get
		Set
			If ((Me._CustomerId = value)  _
						= false) Then
				If Me._CustomerEntity.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnCustomerIdChanging(value)
				Me.SendPropertyChanging
				Me._CustomerId = value
				Me.SendPropertyChanged("CustomerId")
				Me.OnCustomerIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_OrderDate", DbType:="DateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property OrderDate() As Date
		Get
			Return Me._OrderDate
		End Get
		Set
			If ((Me._OrderDate = value)  _
						= false) Then
				Me.OnOrderDateChanging(value)
				Me.SendPropertyChanging
				Me._OrderDate = value
				Me.SendPropertyChanged("OrderDate")
				Me.OnOrderDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequiredDate", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property RequiredDate() As System.Nullable(Of Date)
		Get
			Return Me._RequiredDate
		End Get
		Set
			If (Me._RequiredDate.Equals(value) = false) Then
				Me.OnRequiredDateChanging(value)
				Me.SendPropertyChanging
				Me._RequiredDate = value
				Me.SendPropertyChanged("RequiredDate")
				Me.OnRequiredDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ShippedDate", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ShippedDate() As System.Nullable(Of Date)
		Get
			Return Me._ShippedDate
		End Get
		Set
			If (Me._ShippedDate.Equals(value) = false) Then
				Me.OnShippedDateChanging(value)
				Me.SendPropertyChanging
				Me._ShippedDate = value
				Me.SendPropertyChanged("ShippedDate")
				Me.OnShippedDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Freight", DbType:="Money", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Freight() As System.Nullable(Of Decimal)
		Get
			Return Me._Freight
		End Get
		Set
			If (Me._Freight.Equals(value) = false) Then
				Me.OnFreightChanging(value)
				Me.SendPropertyChanging
				Me._Freight = value
				Me.SendPropertyChanged("Freight")
				Me.OnFreightChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Version", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=false, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Version() As System.Data.Linq.Binary
		Get
			Return Me._Version
		End Get
		Set
			If (Object.Equals(Me._Version, value) = false) Then
				Me.OnVersionChanging(value)
				Me.SendPropertyChanging
				Me._Version = value
				Me.SendPropertyChanged("Version")
				Me.OnVersionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="OrderEntity_OrderDetailEntity", Storage:="_OrderDetailEntities", ThisKey:="OrderId", OtherKey:="OrderId")>  _
	Public Property OrderDetailEntities() As EntitySet(Of OrderDetailEntity)
		Get
			Return Me._OrderDetailEntities
		End Get
		Set
			Me._OrderDetailEntities.Assign(value)
		End Set
	End Property
	
	<Association(Name:="CustomerEntity_OrderEntity", Storage:="_CustomerEntity", ThisKey:="CustomerId", OtherKey:="CustomerId", IsForeignKey:=true)>  _
	Public Property CustomerEntity() As CustomerEntity
		Get
			Return Me._CustomerEntity.Entity
		End Get
		Set
			Dim previousValue As CustomerEntity = Me._CustomerEntity.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CustomerEntity.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CustomerEntity.Entity = Nothing
					previousValue.OrderEntities.Remove(Me)
				End If
				Me._CustomerEntity.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OrderEntities.Add(Me)
					Me._CustomerId = value.CustomerId
				Else
					Me._CustomerId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CustomerEntity")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_OrderDetailEntities(ByVal entity As OrderDetailEntity)
		Me.SendPropertyChanging
		entity.OrderEntity = Me
	End Sub
	
	Private Sub detach_OrderDetailEntities(ByVal entity As OrderDetailEntity)
		Me.SendPropertyChanging
		entity.OrderEntity = Nothing
	End Sub
End Class

<Table(Name:="dbo.Product")>  _
Partial Public Class ProductEntity
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProductId As Integer
	
	Private _CategoryId As Integer
	
	Private _ProductName As String
	
	Private _Weight As String
	
	Private _UnitPrice As Decimal
	
	Private _UnitsInStock As Integer
	
	Private _Version As System.Data.Linq.Binary
	
	Private _OrderDetailEntities As EntitySet(Of OrderDetailEntity)
	
	Private _CategoryEntity As EntityRef(Of CategoryEntity)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIdChanged()
    End Sub
    Partial Private Sub OnCategoryIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCategoryIdChanged()
    End Sub
    Partial Private Sub OnProductNameChanging(value As String)
    End Sub
    Partial Private Sub OnProductNameChanged()
    End Sub
    Partial Private Sub OnWeightChanging(value As String)
    End Sub
    Partial Private Sub OnWeightChanged()
    End Sub
    Partial Private Sub OnUnitPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnUnitPriceChanged()
    End Sub
    Partial Private Sub OnUnitsInStockChanging(value As Integer)
    End Sub
    Partial Private Sub OnUnitsInStockChanged()
    End Sub
    Partial Private Sub OnVersionChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnVersionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OrderDetailEntities = New EntitySet(Of OrderDetailEntity)(AddressOf Me.attach_OrderDetailEntities, AddressOf Me.detach_OrderDetailEntities)
		Me._CategoryEntity = CType(Nothing, EntityRef(Of CategoryEntity))
		OnCreated
	End Sub
	
	<Column(Storage:="_ProductId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ProductId() As Integer
		Get
			Return Me._ProductId
		End Get
		Set
			If ((Me._ProductId = value)  _
						= false) Then
				Me.OnProductIdChanging(value)
				Me.SendPropertyChanging
				Me._ProductId = value
				Me.SendPropertyChanged("ProductId")
				Me.OnProductIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CategoryId", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property CategoryId() As Integer
		Get
			Return Me._CategoryId
		End Get
		Set
			If ((Me._CategoryId = value)  _
						= false) Then
				If Me._CategoryEntity.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnCategoryIdChanging(value)
				Me.SendPropertyChanging
				Me._CategoryId = value
				Me.SendPropertyChanged("CategoryId")
				Me.OnCategoryIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProductName", DbType:="VarChar(40) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ProductName() As String
		Get
			Return Me._ProductName
		End Get
		Set
			If (String.Equals(Me._ProductName, value) = false) Then
				Me.OnProductNameChanging(value)
				Me.SendPropertyChanging
				Me._ProductName = value
				Me.SendPropertyChanged("ProductName")
				Me.OnProductNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Weight", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Weight() As String
		Get
			Return Me._Weight
		End Get
		Set
			If (String.Equals(Me._Weight, value) = false) Then
				Me.OnWeightChanging(value)
				Me.SendPropertyChanging
				Me._Weight = value
				Me.SendPropertyChanged("Weight")
				Me.OnWeightChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UnitPrice", DbType:="Money NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property UnitPrice() As Decimal
		Get
			Return Me._UnitPrice
		End Get
		Set
			If ((Me._UnitPrice = value)  _
						= false) Then
				Me.OnUnitPriceChanging(value)
				Me.SendPropertyChanging
				Me._UnitPrice = value
				Me.SendPropertyChanged("UnitPrice")
				Me.OnUnitPriceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UnitsInStock", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property UnitsInStock() As Integer
		Get
			Return Me._UnitsInStock
		End Get
		Set
			If ((Me._UnitsInStock = value)  _
						= false) Then
				Me.OnUnitsInStockChanging(value)
				Me.SendPropertyChanging
				Me._UnitsInStock = value
				Me.SendPropertyChanged("UnitsInStock")
				Me.OnUnitsInStockChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Version", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=false, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Version() As System.Data.Linq.Binary
		Get
			Return Me._Version
		End Get
		Set
			If (Object.Equals(Me._Version, value) = false) Then
				Me.OnVersionChanging(value)
				Me.SendPropertyChanging
				Me._Version = value
				Me.SendPropertyChanged("Version")
				Me.OnVersionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ProductEntity_OrderDetailEntity", Storage:="_OrderDetailEntities", ThisKey:="ProductId", OtherKey:="ProductId")>  _
	Public Property OrderDetailEntities() As EntitySet(Of OrderDetailEntity)
		Get
			Return Me._OrderDetailEntities
		End Get
		Set
			Me._OrderDetailEntities.Assign(value)
		End Set
	End Property
	
	<Association(Name:="CategoryEntity_ProductEntity", Storage:="_CategoryEntity", ThisKey:="CategoryId", OtherKey:="CategoryId", IsForeignKey:=true)>  _
	Public Property CategoryEntity() As CategoryEntity
		Get
			Return Me._CategoryEntity.Entity
		End Get
		Set
			Dim previousValue As CategoryEntity = Me._CategoryEntity.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CategoryEntity.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CategoryEntity.Entity = Nothing
					previousValue.ProductEntities.Remove(Me)
				End If
				Me._CategoryEntity.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProductEntities.Add(Me)
					Me._CategoryId = value.CategoryId
				Else
					Me._CategoryId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CategoryEntity")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_OrderDetailEntities(ByVal entity As OrderDetailEntity)
		Me.SendPropertyChanging
		entity.ProductEntity = Me
	End Sub
	
	Private Sub detach_OrderDetailEntities(ByVal entity As OrderDetailEntity)
		Me.SendPropertyChanging
		entity.ProductEntity = Nothing
	End Sub
End Class

<Table(Name:="dbo.OrderDetail")>  _
Partial Public Class OrderDetailEntity
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _OrderId As Integer
	
	Private _ProductId As Integer
	
	Private _UnitPrice As Decimal
	
	Private _Quantity As Integer
	
	Private _Discount As Double
	
	Private _Version As System.Data.Linq.Binary
	
	Private _OrderEntity As EntityRef(Of OrderEntity)
	
	Private _ProductEntity As EntityRef(Of ProductEntity)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOrderIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnOrderIdChanged()
    End Sub
    Partial Private Sub OnProductIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductIdChanged()
    End Sub
    Partial Private Sub OnUnitPriceChanging(value As Decimal)
    End Sub
    Partial Private Sub OnUnitPriceChanged()
    End Sub
    Partial Private Sub OnQuantityChanging(value As Integer)
    End Sub
    Partial Private Sub OnQuantityChanged()
    End Sub
    Partial Private Sub OnDiscountChanging(value As Double)
    End Sub
    Partial Private Sub OnDiscountChanged()
    End Sub
    Partial Private Sub OnVersionChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnVersionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._OrderEntity = CType(Nothing, EntityRef(Of OrderEntity))
		Me._ProductEntity = CType(Nothing, EntityRef(Of ProductEntity))
		OnCreated
	End Sub
	
	<Column(Storage:="_OrderId", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property OrderId() As Integer
		Get
			Return Me._OrderId
		End Get
		Set
			If ((Me._OrderId = value)  _
						= false) Then
				If Me._OrderEntity.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnOrderIdChanging(value)
				Me.SendPropertyChanging
				Me._OrderId = value
				Me.SendPropertyChanged("OrderId")
				Me.OnOrderIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProductId", DbType:="Int NOT NULL", IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ProductId() As Integer
		Get
			Return Me._ProductId
		End Get
		Set
			If ((Me._ProductId = value)  _
						= false) Then
				If Me._ProductEntity.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnProductIdChanging(value)
				Me.SendPropertyChanging
				Me._ProductId = value
				Me.SendPropertyChanged("ProductId")
				Me.OnProductIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UnitPrice", DbType:="Money NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property UnitPrice() As Decimal
		Get
			Return Me._UnitPrice
		End Get
		Set
			If ((Me._UnitPrice = value)  _
						= false) Then
				Me.OnUnitPriceChanging(value)
				Me.SendPropertyChanging
				Me._UnitPrice = value
				Me.SendPropertyChanged("UnitPrice")
				Me.OnUnitPriceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Quantity", DbType:="Int NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Quantity() As Integer
		Get
			Return Me._Quantity
		End Get
		Set
			If ((Me._Quantity = value)  _
						= false) Then
				Me.OnQuantityChanging(value)
				Me.SendPropertyChanging
				Me._Quantity = value
				Me.SendPropertyChanged("Quantity")
				Me.OnQuantityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Discount", DbType:="Float NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Discount() As Double
		Get
			Return Me._Discount
		End Get
		Set
			If ((Me._Discount = value)  _
						= false) Then
				Me.OnDiscountChanging(value)
				Me.SendPropertyChanging
				Me._Discount = value
				Me.SendPropertyChanged("Discount")
				Me.OnDiscountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Version", AutoSync:=AutoSync.Always, DbType:="rowversion NOT NULL", CanBeNull:=false, IsDbGenerated:=true, IsVersion:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Version() As System.Data.Linq.Binary
		Get
			Return Me._Version
		End Get
		Set
			If (Object.Equals(Me._Version, value) = false) Then
				Me.OnVersionChanging(value)
				Me.SendPropertyChanging
				Me._Version = value
				Me.SendPropertyChanged("Version")
				Me.OnVersionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="OrderEntity_OrderDetailEntity", Storage:="_OrderEntity", ThisKey:="OrderId", OtherKey:="OrderId", IsForeignKey:=true)>  _
	Public Property OrderEntity() As OrderEntity
		Get
			Return Me._OrderEntity.Entity
		End Get
		Set
			Dim previousValue As OrderEntity = Me._OrderEntity.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._OrderEntity.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._OrderEntity.Entity = Nothing
					previousValue.OrderDetailEntities.Remove(Me)
				End If
				Me._OrderEntity.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OrderDetailEntities.Add(Me)
					Me._OrderId = value.OrderId
				Else
					Me._OrderId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("OrderEntity")
			End If
		End Set
	End Property
	
	<Association(Name:="ProductEntity_OrderDetailEntity", Storage:="_ProductEntity", ThisKey:="ProductId", OtherKey:="ProductId", IsForeignKey:=true)>  _
	Public Property ProductEntity() As ProductEntity
		Get
			Return Me._ProductEntity.Entity
		End Get
		Set
			Dim previousValue As ProductEntity = Me._ProductEntity.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ProductEntity.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ProductEntity.Entity = Nothing
					previousValue.OrderDetailEntities.Remove(Me)
				End If
				Me._ProductEntity.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OrderDetailEntities.Add(Me)
					Me._ProductId = value.ProductId
				Else
					Me._ProductId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ProductEntity")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
